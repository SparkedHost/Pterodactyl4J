import org.apache.tools.ant.filters.ReplaceTokens
plugins {
    id 'java'
    id 'maven'
    id 'maven-publish'
}

sourceCompatibility = targetCompatibility = 1.8

def versionObject = new Version(major: 2, minor: 0)
version "$versionObject"

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'org.json:json:20160810'
    implementation 'org.slf4j:slf4j-api:1.7.32'
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/sparkedhost/pterodactyl4j")
            credentials {
                username = System.getenv("USERNAME") ?: System.getenv("GITHUB_USERNAME")
                password = System.getenv("TOKEN") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        mavenJar(MavenPublication) {
            from components.java
            groupId = "com.sparkedhost"
            artifactId = "pterodactyl4j"
            version = version
            artifact sourcesJar
        }
    }
}

javadoc {
    failOnError = false
    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        encoding = "UTF-8"
    }
    if (options instanceof StandardJavadocDocletOptions) {
        StandardJavadocDocletOptions opt = options
        opt.author()
        opt.tags("incubating:a:Incubating:")
        opt.links(
                "https://docs.oracle.com/javase/8/docs/api/",
                "https://square.github.io/okhttp/4.x/okhttp/okhttp3/")
        if (JavaVersion.current().isJava9Compatible()) {
            opt.addBooleanOption("html5", true)
            opt.addStringOption("-release", "8")
        }
        if (JavaVersion.current().isJava11Compatible()) {
            opt.addBooleanOption("-no-module-directories", true)
        }
    }

    exclude("com/sparkedhost/pterodactyl4j/requests",

            "com/sparkedhost/pterodactyl4j/utils/Checks.java",
            "com/sparkedhost/pterodactyl4j/utils/ExceptionUtils.java",
            "com/sparkedhost/pterodactyl4j/utils/LockUtils.java",
            "com/sparkedhost/pterodactyl4j/utils/NamedThreadFactory.java",

            "com/sparkedhost/pterodactyl4j/entities/impl",
            "com/sparkedhost/pterodactyl4j/application/entities/impl",
            "com/sparkedhost/pterodactyl4j/client/entities/impl",

            "com/sparkedhost/pterodactyl4j/client/ws/handle",
            "com/sparkedhost/pterodactyl4j/client/ws/WebSocketClient.java",
            "com/sparkedhost/pterodactyl4j/client/ws/WebSocketAction.java")
}

task sourcesForRelease(type: Copy) {
    from('src/main/java') {
        include '**/P4JInfo.java'
        filter(ReplaceTokens, tokens: [
                MAJOR: versionObject.major,
                MINOR: versionObject.minor,
                BUILD: versionObject.build
        ])
    }
    into 'build/filteredSrc'
    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.java.filter {
        it.name != 'P4JInfo.java'
    }
    source = javaSources + sourcesForRelease.destinationDir
    dependsOn sourcesForRelease
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from ('src/main/java') {
        exclude '**/P4JInfo.java'
    }
    from sourcesForRelease.destinationDir
    dependsOn sourcesForRelease
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

compileJava {
    source = generateJavaSources.source
    dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

class Version {
    String major, minor
    def build = System.getenv('BUILD_NUMBER') ?: 'DEV'

    String toString() {
        return "$major.${minor}-$build"
    }
}
